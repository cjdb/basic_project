#
#  Copyright 2019 Christopher Di Bella
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
task:
  container:
    image: cjdb/cirrus-cpp:bionic
    cpu: 2
    memory: 2
  env:
    matrix:
      - PROFILE: gcc-5
        CODE_COVERAGE: gcov
        REQUIRED_SANITIZERS: Address;Undefined

      - PROFILE: gcc-6
        CODE_COVERAGE: gcov
        REQUIRED_SANITIZERS: Address;Undefined

      - PROFILE: gcc-7
        CODE_COVERAGE: gcov
        REQUIRED_SANITIZERS: Address;Undefined

      - PROFILE: gcc-8
        CODE_COVERAGE: gcov
        REQUIRED_SANITIZERS: Address;Undefined

      - PROFILE: clang-4
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-4-libcxx
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-4-libcxx-msan
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: MemoryWithOrigins;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-5
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-5-libcxx
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-5-libcxx-msan
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: MemoryWithOrigins;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-6
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-6-libcxx
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-6-libcxx-msan
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: MemoryWithOrigins;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-7
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-7-libcxx
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-7-libcxx-msan
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: MemoryWithOrigins;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-8
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-8-libcxx
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: Address;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity

      - PROFILE: clang-8-libcxx-msan
        CODE_COVERAGE: LLVMSourceCoverage
        REQUIRED_SANITIZERS: MemoryWithOrigins;Undefined
        OPTIONAL_SANITIZERS: ControlFlowIntegrity
  generate_scripts_script:
    - |
      echo '#!/bin/bash'                 > /tmp/pre-install.sh
      echo 'mkdir -p build-${1}'        >> /tmp/pre-install.sh
      echo 'conan config install conan' >> /tmp/pre-install.sh
      chmod 755 /tmp/pre-install.sh

    - |
      echo '#!/bin/bash'                      > /tmp/conan-install.sh
      echo 'cd build-${1}'                   >> /tmp/conan-install.sh
      echo 'conan install .. \'              >> /tmp/conan-install.sh
      echo '   --profile=${PROFILE} \'       >> /tmp/conan-install.sh
      echo '   --settings build_type=${1} \' >> /tmp/conan-install.sh
      echo '   --build missing'              >> /tmp/conan-install.sh
      chmod 755 /tmp/conan-install.sh

    - |
      echo '#!/bin/bash'                                                        > /tmp/build-configure.sh
      echo 'cd build-${1}'                                                     >> /tmp/build-configure.sh
      echo 'conan build .. --configure'                                        >> /tmp/build-configure.sh
      echo "cmake .. -Dbasic_project_CODE_COVERAGE='${CODE_COVERAGE}' \\"      >> /tmp/build-configure.sh
      echo "  -Dbasic_project_REQUIRED_SANITIZERS='${REQUIRED_SANITIZERS}' \\" >> /tmp/build-configure.sh
      echo "  -Dbasic_project_OPTIONAL_SANITIZERS='${OPTIONAL_SANITIZERS}'"    >> /tmp/build-configure.sh
      chmod 755 /tmp/build-configure.sh

    - |
      echo '#!/bin/bash'     > /tmp/build.sh
      echo 'cd build-${1}'  >> /tmp/build.sh
      echo 'ninja -v'       >> /tmp/build.sh
      chmod 755 /tmp/build.sh

    - |
      echo '#!/bin/bash'                     > /tmp/test.sh
      echo 'cd build-${1}'                  >> /tmp/test.sh
      echo 'ctest -j 8 --output-on-failure' >> /tmp/test.sh
      chmod 755 /tmp/test.sh

  pre_install_Debug_script:
    - /tmp/pre-install.sh Debug
  conan_install_Debug_script:
    - /tmp/conan-install.sh Debug
  conan_build_configure_Debug_script:
    - /tmp/build-configure.sh Debug
  build_Debug_script:
    - /tmp/build.sh Debug
  test_Debug_script:
    - /tmp/test.sh Debug

  pre_install_Release_script:
    - /tmp/pre-install.sh Release
  conan_install_Release_script:
    - /tmp/conan-install.sh Release
  conan_build_configure_Release_script:
    - /tmp/build-configure.sh Release
  build_Release_script:
    - /tmp/build.sh Release
  test_Release_script:
    - /tmp/test.sh Release

  clang_format_script:
    - bash config/hooks/clang-format.sh
